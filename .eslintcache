[{"C:\\Users\\user\\jsdev\\411\\quivia\\src\\index.js":"1","C:\\Users\\user\\jsdev\\411\\quivia\\src\\reportWebVitals.js":"2","C:\\Users\\user\\jsdev\\411\\quivia\\src\\components\\app\\App.js":"3","C:\\Users\\user\\jsdev\\411\\quivia\\src\\Router.js":"4","C:\\Users\\user\\jsdev\\411\\quivia\\src\\serviceWorker.js":"5","C:\\Users\\user\\jsdev\\411\\quivia\\src\\components\\highscore\\HighScore.js":"6","C:\\Users\\user\\jsdev\\411\\quivia\\src\\components\\leaderboard\\LeaderBoard.js":"7"},{"size":629,"mtime":1612038447788,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":4868,"mtime":1612127138049,"results":"11","hashOfConfig":"9"},{"size":1244,"mtime":1612127050513,"results":"12","hashOfConfig":"9"},{"size":5086,"mtime":1612038202448,"results":"13","hashOfConfig":"9"},{"size":1554,"mtime":1612095411290,"results":"14","hashOfConfig":"9"},{"size":926,"mtime":1612127693489,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1pj8efv",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\jsdev\\411\\quivia\\src\\index.js",["34"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './Router';\nimport App from './components/app/App'\n\nconst Main = () => (\n\n  <BrowserRouter>\n      <Router />\n  </BrowserRouter>\n\n);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["35","36"],"C:\\Users\\user\\jsdev\\411\\quivia\\src\\reportWebVitals.js",[],"C:\\Users\\user\\jsdev\\411\\quivia\\src\\components\\app\\App.js",["37","38","39","40"],"import React, { Component } from 'react';\nimport '../../App.css';\nimport logo from './brainium-logo2.png'\nimport brain from './brain.png'\nimport wrongMark from './brainium-wrongMark.gif'\nimport skipButton from './brainium-skip.png';\nimport HighScore from '../highscore/HighScore'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        questions: [],\n        answers: [],\n        correct: false,\n        wrong: false,\n        wrongAnswers: [],\n        gameOver: false,\n        skipsLeft: 3,\n        skip: false,\n        score: 0\n    };\n  }\n\n  \n// generate a random number in the required range (min-max)\ngetRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  componentDidUpdate() {\n    if(this.state.correct || this.state.wrong || this.state.skip) {\n      this.setState({\n        correct:false,\n        wrong: false,\n        skip:false\n      })\n      this.getQuestions()\n    }\n  }\n\n  getQuestions = () => {\n \n    let url = \"https://opentdb.com/api.php?amount=1&type=multiple\";\n    fetch(url)\n    .then(res=>res.json())\n    .then(data => {\n     let rightPosition = this.getRandomInt(0,2)\n     let answerArray = data.results[0].incorrect_answers\n     answerArray.splice(rightPosition,0,data.results[0].correct_answer)\n      console.log(answerArray)\n      this.setState({\n        questions: data.results,\n        answers: answerArray\n      })\n   \n    \n    })\n  }\n\n  checkAnswer(answer) {\n    let gameOver=this.state.gameOver;\n    if (!gameOver) {\n    let currentScore = this.state.score;\n    if (answer===this.state.questions[0].correct_answer) {\n      if(this.state.questions[0].difficulty===\"easy\") {\n        currentScore+=5;\n      } else if (this.state.questions[0].difficulty===\"medium\") {\n        currentScore+=10;\n      } else if (this.state.questions[0].difficulty===\"hard\") {\n        currentScore+=20;\n      }\n      this.setState({\n        score:currentScore,\n        correct:true,\n        wrong: false\n      })\n    } else {\n      let gameOver=false;\n      let totalWrong = this.state.wrongAnswers;\n      if(totalWrong.length<3) {\n        totalWrong.push(\"wrong\");\n      }\n      \n      if (totalWrong.length===3) {gameOver=true}\n      currentScore-=5;\n      if (currentScore<0) currentScore=0;\n      this.setState({\n        score:currentScore,\n        correct:false,\n        wrongAnswers:totalWrong,\n        gameOver:gameOver,\n        wrong: true\n      })\n  }\n}\n}\n\nskipQuestion() {\n  let skipsLeft = this.state.skipsLeft;\n\n  skipsLeft--;\n  if (skipsLeft<0) skipsLeft=0;\n\n  this.setState({\n    skipsLeft:skipsLeft,\n    skip: true\n  })\n}\n\n  render() {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} style={{width:\"200px\"}} />\n        <span style={{color:\"lightgreen\"}}>Wrinkle Your Brain</span>\n        \n        \n        <p/>\n        {this.state.questions && !this.state.gameOver && this.state.questions.map( question => \n          <div style={{width:\"100%\",fontSize:\"xx-large\"}}>\n            <div dangerouslySetInnerHTML={{ __html: question.question }}></div><p/>\n            <div style={{fontSize:\"large\",textAlign:\"center\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-around\",alignItems:\"center\",alignContent:\"center\"}}>\n            {this.state.answers.map(answer => \n              <div style={{color:\"#463f57\",padding:\"20px\",width:\"20%\",margin:\"20px\",backgroundColor:\"coral\",borderRadius:\"15px\",fontWeight:\"550\"}} onClick={()=>this.checkAnswer(answer)} dangerouslySetInnerHTML={{ __html: answer }}>\n              </div>\n              )}\n            {this.state.skipsLeft>0 &&\n            <div style={{padding:\"1px\",color:\"#463f57\",width:\"20%\",margin:\"20px\",backgroundColor:\"coral\",borderRadius:\"15px\"}} onClick={()=>this.skipQuestion()}>\n              <img src={skipButton} style={{height:\"56px\"}} />\n            </div>\n            }\n            </div>\n                      </div>\n          )}\n          <div style={{fontSize:\"xxx-large\"}}>\n            {this.state.score}\n          </div>\n          \n \n          <div style={{textAlign:\"center\",display:\"flex\",flexDirection:\"row\",justifyContent:\"space-around\",alignItems:\"center\",alignContent:\"center\"}}>\n          {this.state.wrongAnswers && this.state.wrongAnswers.map(newWrong => \n          <div>\n          <img src={wrongMark} style={{width:\"100px\",margin:\"10px\",border:\"1px solid grey\",borderRadius:\"15px\"}} />\n           </div>\n          )}\n          </div>\n\n          {this.state.gameOver && \n          <div>\n            <HighScore score={this.state.score} />\n          </div>\n          }\n\n          <div>\n            <a href=\"/leaders\" style={{color:\"white\"}}>LeaderBoard</a>\n          </div>\n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","C:\\Users\\user\\jsdev\\411\\quivia\\src\\Router.js",[],"C:\\Users\\user\\jsdev\\411\\quivia\\src\\serviceWorker.js",[],"C:\\Users\\user\\jsdev\\411\\quivia\\src\\components\\highscore\\HighScore.js",["41"],"import React, { Component } from 'react';\r\nimport '../../App.css';\r\n\r\nclass HighScore extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        success: false\r\n    };\r\n    \r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  \r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const postData = { playerName: this.state.value, score: this.props.score };\r\n    const registerUrl = \"https://quiviaapi.herokuapp.com/addScore\";\r\n    fetch(registerUrl, {\r\n      method: 'post',\r\n      body: JSON.stringify(postData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.code == \"200\") {\r\n         this.setState({\r\n             success: true\r\n         })\r\n        } else {\r\n\r\n          console.log(\"error code\", data);\r\n        } \r\n\r\n      })\r\n      .catch((error) => {\r\n        console.log('Error: ', error);\r\n \r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n   <div>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} required />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form><p/>\r\n      {this.state.success && <div>\r\n          Your score has been saved!\r\n          </div>}\r\n   </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default HighScore;\r\n","C:\\Users\\user\\jsdev\\411\\quivia\\src\\components\\leaderboard\\LeaderBoard.js",[],{"ruleId":"42","severity":1,"message":"43","line":7,"column":8,"nodeType":"44","messageId":"45","endLine":7,"endColumn":11},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"42","severity":1,"message":"50","line":4,"column":8,"nodeType":"44","messageId":"45","endLine":4,"endColumn":13},{"ruleId":"51","severity":1,"message":"52","line":121,"column":9,"nodeType":"53","endLine":121,"endColumn":51},{"ruleId":"51","severity":1,"message":"52","line":136,"column":15,"nodeType":"53","endLine":136,"endColumn":63},{"ruleId":"51","severity":1,"message":"52","line":150,"column":11,"nodeType":"53","endLine":150,"endColumn":116},{"ruleId":"54","severity":1,"message":"55","line":33,"column":23,"nodeType":"56","messageId":"57","endLine":33,"endColumn":25},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["58"],"no-negated-in-lhs",["59"],"'brain' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]